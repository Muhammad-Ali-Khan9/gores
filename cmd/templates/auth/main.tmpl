package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"

	// Import your global middleware package from the monorepo root
	"pkg/http"
	// Import the internal package for the auth service components
	internal "{{.Name | lower}}-service/internal"
)

func main() {
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found or failed to load. Using system environment variables.")
	}

	authService := internal.NewAuthService()
	authController := internal.NewAuthController(authService)

	// --- Fiber App Setup with Prefork ---
	app := fiber.New(fiber.Config{
		Prefork: true, // Enable prefork for load balancing
	})

	middleware.InitGlobalMiddlewares(app)

	internal.RegisterAuthRoutes(app, authController)

	port := os.Getenv("PORT")
	if port == "" {
		port = "{{.Port}}"
	}

	// --- Start HTTP Server in a Goroutine ---
	go func() {
		log.Printf("Auth service is running on :%s", port)
		if err := app.Listen(":" + port); err != nil && err != fiber.ErrServerClosed {
			log.Fatalf("Fiber Listen error: %v", err)
		}
	}()

	// --- Graceful Shutdown ---
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	<-quit
	log.Println("Shutdown signal received, shutting down gracefully...")

	if err := app.Shutdown(); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server gracefully stopped.")
}