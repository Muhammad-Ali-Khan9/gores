package main

import (
	"context"
	"flag"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gofiber/fiber/v2" // Import Fiber
	"github.com/joho/godotenv"

	// You'll need to replace these with your actual package paths.
	"pkg/database/postgres" 
	"src/internal"
	"pkg/entities"
)

func main() {
	_ = godotenv.Load()

	// Read port flag or default to 8080
	port := flag.String("port", "8080", "Port to run the HTTP server on")
	flag.Parse()

	// Init DB connection
	db, err := postgres.New()
	if err != nil {
		log.Fatal("Failed to connect to database:", err)
	}

	// Get underlying *sql.DB from GORM
	sqlDB, err := db.DB()
	if err != nil {
		log.Fatal("Failed to get underlying DB from GORM:", err)
	}

	// Setup service and controller
	entityModel := &entities.User{}
	service := internal.NewUserService(db, entityModel)
	controller := internal.NewUserController(service)

	// --- Initialize Fiber and enable Prefork ---
	app := fiber.New(fiber.Config{
		Prefork: true, // This enables prefork for load balancing
	})

	// Setup router (assumes a new RegisterUserRoutes that accepts *fiber.App)
	internal.RegisterUserRoutes(app, controller)

	// Channel to listen for OS signals
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)

	// Start server in goroutine
	go func() {
		addr := ":" + *port
		log.Printf("Service running on %s\n", addr)
		if err := app.Listen(addr); err != nil {
			log.Fatalf("Fiber Listen error: %v", err)
		}
	}()

	// Wait for termination signal
	<-stop
	log.Println("Shutting down server...")

	// Shutdown server
	if err := app.Shutdown(); err != nil {
		log.Fatalf("Server shutdown failed: %v", err)
	}

	// Close DB connection
	if err := sqlDB.Close(); err != nil {
		log.Printf("Error closing DB connection: %v", err)
	} else {
		log.Println("Database connection closed.")
	}

	log.Println("Server gracefully stopped.")
}